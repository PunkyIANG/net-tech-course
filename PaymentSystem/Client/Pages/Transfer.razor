@page "/transfer/{sourceWalletId}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using PaymentSystem.Shared
@attribute [Authorize]
@inject HttpClient HttpClient
@inject NavigationManager navManager;

<h3>Transfer</h3>


@if (wallet == null)
{
    <div>Loading...</div>
}
else
{
    <div class="card" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">Wallet @wallet.Id</h5>
            <p class="card-text">Amount: @wallet.Amount @wallet.Currency</p>
            <p>
                Amount: <br />
                <input @bind="transferData.Amount" />
            </p>
            <p>
                Username: <br />
                <input @bind="transferData.Username" @onfocusout="ValidateDestination" />
            </p>

            @if (validationStatus == ValidationStatus.Success)
            {
                <p class="text-success">This user exists and has a suitable wallet to receive the funds</p>
            }
            else if (validationStatus == ValidationStatus.Error)
            {
                <p class="validation-message">This user does not exist or does not have a suitable wallet to receive the funds</p>
            }

            <button class="btn btn-primary" @onclick="MakeTransfer">Transfer</button>
        </div>
    </div>
}


@code {
    [Parameter]
    public string SourceWalletId { get; set; }

    public Wallet wallet { get; set; }

    public TransferDto transferData { get; set; } = new TransferDto();

    enum ValidationStatus
    {
        None,
        Success,
        Error
    }

    ValidationStatus validationStatus = ValidationStatus.None;



    protected override async Task OnInitializedAsync()
    {
        try
        {
            wallet = await HttpClient.GetFromJsonAsync<Wallet>($"api/wallet/{SourceWalletId}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task MakeTransfer()
    {
        try
        {
            transferData.SourceWalletId = SourceWalletId;
            transferData.Currency = wallet.Currency;
            var response = await HttpClient.PostAsJsonAsync($"api/wallet/transfer", transferData);

            if (response.IsSuccessStatusCode)
            {
                navManager.NavigateTo("wallets");
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task ValidateDestination()
    {
        try
        {
            transferData.SourceWalletId = SourceWalletId;
            transferData.Currency = wallet.Currency;
            var response = await HttpClient.PostAsJsonAsync($"api/wallet/validation", transferData);

            if (response.IsSuccessStatusCode)
            {
                validationStatus = ValidationStatus.Success;
            }
            else
            {
                validationStatus = ValidationStatus.Error;
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
